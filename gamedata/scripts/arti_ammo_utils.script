
math_random         = math.random
math_floor          = math.floor
gc                  = game.translate_string
ini_ammo            = ballistics_utils.ini_ammo

local modes = {
	["inventory"] = true,
}
local bags = {
	["actor_bag"] = true,
	["actor_equ"] = true,
	["actor_belt"] = true,
}
function try_mg_link(obj, bag, mode)
    if obj and bags[bag] and modes[mode] then
        if obj:section() == "ammo_7.62x54_7h1" then
            return gc("st_link")
        elseif obj:section() == "ammo_pkm_100" then
            return gc("st_unlink")
        end
    end
end

function mg_link(obj)
    -- grab up to 5 and try to link them together
    if obj:section() ==  "ammo_7.62x54_7h1" then
        local to_link = {}
        local count = 0
        db.actor:iterate_inventory(function(npc, item)
            if item:section() == "ammo_7.62x54_7h1" and count < 5 then
                to_link[item:id()] = item
                count = count + 1
            end
        end)
        local total = 0
        for k,v in pairs(to_link) do
            total = total + v:ammo_get_count()
            alife_release_id(k)
        end
        if total > 0 then
            alife_create_item("ammo_pkm_100", db.actor, {ammo = total})
        end
    elseif obj:section() == "ammo_pkm_100" then
        local count = obj:ammo_get_count()
        create_ammo("ammo_7.62x54_7h1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), AC_ID, count)
        alife_release(obj)
    end
end

function downgrade_ammo(sec, bypass, mult)
    mult = mult or 1
    local dg_ammo = ini_ammo:r_string_ex(sec, "dg_ammo")
    local dg_chance = ini_ammo:r_float_ex(sec, "dg_chance") or 0
    dg_chance = dg_chance * mult
    -- printf("[Arti Ammo Utils] Attempt downgrade ammo %s to %s", sec, dg_ammo)
    if dg_ammo and (math_random() < (dg_chance) or bypass) then
        -- printf("[Arti Ammo Utils] Downgrading ammo %s to %s", sec, dg_ammo)
        return dg_ammo
    else 
        return sec
    end
end

function process_wpn(wpn, bypass)
    local ammo_data = utils_item.get_ammo(wpn:section(), wpn:id())
    local ammo_data_inv = invert_table(ammo_data)
    if is_empty(ammo_data) then return end
    local ammo_type = ammo_data[wpn:get_ammo_type() + 1]
    local dg_ammo = ini_ammo:r_string_ex(ammo_type, "dg_ammo") or ""
    local dg_chance = ini_ammo:r_float_ex(ammo_type, "dg_chance") or 0
    if ammo_data_inv[dg_ammo] and (bypass or math_random() < dg_chance) then
        -- printf("[Arti Ammo Utils] Downgrading ammo for weapon %s", wpn:section())
        local cnt = wpn:get_ammo_in_magazine()
        wpn:unload_magazine(true)
        wpn:set_ammo_type(ammo_data_inv[dg_ammo] - 1)
        wpn:set_ammo_elapsed(cnt)
    end
end

local downgrade = false

SpawnAmmo = death_manager.try_spawn_ammo
function death_manager.try_spawn_ammo(npc)
    downgrade = true
    SpawnAmmo(npc)
    downgrade = false
end

SetDrop = death_manager.set_weapon_drop_condition
function death_manager.set_weapon_drop_condition(npc,itm)
    downgrade = true
    SetDrop(npc,itm)
    downgrade = false
end

AlifeCreate = _G.alife_create_item
function _G.alife_create_item(section, obj, t)
    if downgrade and IsItem("ammo",section) and obj:id() ~= AC_ID then 
        section = downgrade_ammo(section, true)
    end
    return AlifeCreate(section, obj, t)
end

-- this happens whenever npc comes online, currently guarantees that the npc will never have access to better ammo (credit to Arti)
function npc_on_net_spawn(npc)
	if npc:has_info("npcx_is_companion") then return end
    CreateTimeEvent("downgrade_ammos",npc:id(), 0,function()
        npc:iterate_inventory(function(t, item)
            if IsWeapon(item) then process_wpn(item, true) end
        end)
        return true
    end)
end

if magazines then
    RollAmmo = magazines_loot.determine_ammo
    -- subject the ammo pop in mags to downgrade
    function magazines_loot.determine_ammo(ammo_to_pick, mag_sec, rank)
        if RollAmmo then
            -- printf("[Arti Ammo Utils] Roll to downgrade %s in %s", ammo_to_pick, mag_sec)
            ammo_to_pick = RollAmmo(ammo_to_pick, mag_sec, rank)
            ammo_to_pick = downgrade_ammo(ammo_to_pick, true)
        end
        return ammo_to_pick
    end
end

function on_game_start()
	-- custom_functor_autoinject.add_functor("mg_link", try_mg_link, try_mg_link, nil, mg_link, true)
	RegisterScriptCallback("npc_on_net_spawn",npc_on_net_spawn)
	-- RegisterScriptCallback("actor_on_item_use", update_recipe_list)
end