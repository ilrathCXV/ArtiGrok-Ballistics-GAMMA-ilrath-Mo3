----------------------------------------------------
-- EDIT for ArtiGrok - ilrathCXV (01/17/23) 
-- Added Knife Stat Compat. (credit to Momopate) - ilrathCXV (11/13/23)
-- Added better stat reads (showing negative/red for bad stats - credit to Momopate) - ilrathCXV (05/03/24)
----------------------------------------------------

if momopate_knife_stats then end

local ini_ammo = ini_file("ammo\\importer.ltx")
local difficulty_scaling = ballistics_mcm.get_config("difficulty_scaling") or false

function inject_stats()
    utils_ui.stats_table["ammo"] = {
    ["damage"] = { 
        index= 10, typ= "float",   name= "st_prop_k_hit",         icon_p= "ui_wp_prop_damage",            icon_n= "", track= false,  magnitude= 1,     	unit= "st_perc", 		compare= false, sign=false,		sign_inverse = true,	show_always= true, value_functor= {"cxv_ammo_stats_tbl","prop_damage"} },
    ["ap"] = { 
        index= 20, typ= "string",  name= "st_prop_k_ap",          icon_p= "ui_wp_propery_04",             icon_n= "", track= false,  magnitude= 1,    	unit= "",  				compare= false, sign=false,		sign_inverse = false, 	show_always= true, value_functor= {"cxv_ammo_stats_tbl","prop_ap"} },
    ["mutant_mod"] = { 
        index= 30, typ= "float",   name= "st_prop_k_mutant",      icon_p= "ui_wp_propery_08",            icon_n= "", track= false,  magnitude= 1,     	unit= "st_perc", 		compare= false, sign=true,		sign_inverse = false,	show_always= false, value_functor= {"cxv_ammo_stats_tbl","prop_mutant_mod"} },
    ["gigant_mod"] = { 
        index= 40, typ= "float",   name= "st_prop_k_gigant",      icon_p= "ui_wp_propery_08",            icon_n= "", track= false,  magnitude= 1,     	unit= "st_perc", 		compare= false, sign=true,		sign_inverse = false,	show_always= false, value_functor= {"cxv_ammo_stats_tbl","prop_gigant_mod"} },
    ["stalker_mod"] = { 
        index= 50, typ= "float",   name= "st_prop_k_stalker",     icon_p= "ui_wp_propery_08",            icon_n= "", track= false,  magnitude= 1,    	unit= "st_perc", 		compare= false, sign=true,		sign_inverse = false,	show_always= false, value_functor= {"cxv_ammo_stats_tbl","prop_stalker_mod"} },

    ["projectiles"] = { 
        index= 60, typ= "float",   name= "st_prop_projectiles",   icon_p= "ui_wp_prop_skorostrelnost",    icon_n= "", track= false,  magnitude= 1,      unit= "",           	compare= false, sign= false, 	sign_inverse = false,	show_always= true, value_functor= {"cxv_ammo_stats_tbl","prop_projectiles"} },

    ["accuracy"] ={ 
        index= 70, typ= "float",   name= "st_prop_k_disp",        icon_p= "ui_wp_prop_tochnost",          icon_n= "", track= false,  magnitude= 1,      unit= "st_perc",       	compare= false, sign= false, 	sign_inverse = true,	show_always= false, value_functor= {"cxv_ammo_stats_tbl","prop_accuracy"} } ,
    ["velocity"]={ 
        index= 80, typ= "float",   name= "st_prop_k_vel",         icon_p= "ui_wp_prop_nastilnost",        icon_n= "", track= false,  magnitude= 1,      unit= "st_perc",      	compare= false, sign= false, 	sign_inverse = true,	show_always= false, value_functor= {"cxv_ammo_stats_tbl","prop_flatness"} } ,

	-- Momopate's Accurate Stats Addons
	["range"]={
		index = 90, typ = "float", name = "st_mp_a_dist", 		  icon_p = "ui_wp_propery_13", 		  	  icon_n = "", track = false, magnitude = 1,	unit = "st_perc",		compare = false, sign = false,	sign_inverse = true,	show_always = false,	value_functor = { "cxv_ammo_stats_tbl", "prop_range" } },
	["falloff"]={ 
		index = 100, typ = "float", name = "st_cxv_airres", 	  icon_p = "ui_wp_propery_05", 			  icon_n = "", track = false, magnitude = 1, 	unit = "st_perc",		compare = false, sign = false,	sign_inverse = true,	show_always = true,		value_functor = { "cxv_ammo_stats_tbl", "prop_falloff" } },
	["penalty"]={
	    index = 110 ,typ = "float", name = "st_prop_nopen",		  icon_p = "ui_wp_propery_12",		  	  icon_n = "", track = false, magnitude = 1,	unit = "st_perc",		compare = false, sign = false,	sign_inverse = true,	show_always = false,	value_functor = { "cxv_ammo_stats_tbl", "prop_nopen" } },
	-- Addons end
	
	["special"]={ 
        index=120, typ= "float",  name= "st_prop_special",       icon_p= "ui_am_condition",              icon_n= "", track= false,  magnitude= 1,      	unit= "",   			compare= false, sign= false, 							show_always=false, value_functor= {"cxv_ammo_stats_tbl","prop_special"} } ,
    ["special_2"]={ 
        index=130, typ= "float",  name= "st_prop_extra",         icon_p= "ui_am_condition",           	  icon_n= "", track= false,  magnitude= 1,      unit= "",   			compare= false, sign= false, 							show_always=false, value_functor= {"cxv_ammo_stats_tbl","prop_extra_special"} } ,
   	}
end

if ish_item_stats then
    override_stats_table = ish_item_stats.override_stats_table
    ish_item_stats.override_stats_table = function()
        override_stats_table()
        inject_stats()
    end
end

-- needed since GAMMA adjusts k_ap based on difficulty
local difficulty_multiplier = {
	[1]  = (difficulty_scaling and 1.3) or 1.0,
	[2]  = (difficulty_scaling and 1.05) or 1.0,
	[3]  = (difficulty_scaling and 0.90) or 1.0,
	[4]  = (difficulty_scaling and 0.80) or 1.0,
}

local function armor_to_class(val)
-- EDIT: Match to Grok's Armor Breakpoints (ilrathCXV - 12/12/22)

	val = val * 100
	if (val < 11) then val = 0
	elseif ( (val >= 11) and (val < 19) ) then val = 1
	elseif ( (val >= 19) and (val < 30) ) then val = 2
	elseif ( (val >= 30) and (val < 39) ) then val = 3
	elseif ( (val >= 39) and (val < 46) ) then val = 4
	elseif ( (val >= 46) and (val < 55) ) then val = 5
	elseif ( (val >= 55) and (val < 81) ) then val = 6
	elseif (val >= 81) then val = 7
	end

	return game.translate_string("st_prop_armor_"..val)		
end

local function armor_to_number(val)
	val = math.floor(val * 100) or 0
	return val
end

prepare_stats_table = utils_ui.prepare_stats_table

function utils_ui.prepare_stats_table()
    prepare_stats_table()
    inject_stats()
end

GetTable = utils_ui.get_stats_table
function utils_ui.get_stats_table(sec)
    if ini_ammo:section_exist(sec) then
        if not utils_ui.stats_table["ammo"] or is_empty(utils_ui.stats_table["ammo"]) then 
            inject_stats() 
        end
        return utils_ui.stats_table["ammo"]
    else
        return GetTable(sec)
    end
end

GetType = utils_ui.UIInfoItem.GetType
function utils_ui.UIInfoItem:GetType(sec)
    if ini_ammo:section_exist(sec) then return "ammo"
    else return GetType(self, sec) end
end

-- patching sync_finale because these post-update effects should only be applied once
Sync_Finale = utils_ui.UIInfoItem.Sync_Finale
function utils_ui.UIInfoItem:Sync_Finale(cond, ele_syncer, ele_resizer, ele_adapter, offset)
    local ret = Sync_Finale(self, cond, ele_syncer, ele_resizer, ele_adapter, offset)
    if not ele_syncer then return ret end
    -- patch the armor val
    local sec = self.section
    local obj = self.id and level.object_by_id(self.id) or nil
	
	local get_slot = SYS_GetParam(2, sec, "animation_slot") or 0
	local is_knife = false
    if (SYS_GetParam(0, sec, "kind") == "w_melee") and (get_slot ~= 13) then
		knife_ammo_sec = SYS_GetParam(0, sec, "ammo_class") or "nil"
		if knife_ammo_sec ~= "nil" then
			is_knife = true
		end
	end
	
    if (sec and ini_ammo:section_exist(sec)) or (is_knife and knife_ammo_sec) then
        for i=1,#self.stats do
			if self.stats[i].cap:GetText() == game.translate_string("st_prop_k_ap") then
                local str
                local ap = ini_sys:r_float_ex(is_knife and knife_ammo_sec or sec, "k_ap") or 0
				
				local game_num = 1
				
				if difficulty_scaling then
					local gameplay = alife_storage_manager.get_state().diff_game
					if not (type(gameplay) == "table") then -- for old saves
						alife_storage_manager.get_state().diff_game = {}
						alife_storage_manager.get_state().diff_game["type"] = game_num
						gameplay = alife_storage_manager.get_state().diff_game
					end
				
					game_num = gameplay["type"] or game_num
					if game_num > 4 then game_num = 4 end 				-- in case someone is using a custom difficulty
				end
				
				
				ap = ap * 10 * difficulty_multiplier[game_num]
                str = armor_to_class(ap) .. " (" .. armor_to_number(ap) ..")"
                self.stats[i].txt:SetText(str)
            end
            if self.stats[i].cap:GetText() == game.translate_string("st_prop_special") then    
                local str_spec = ini_ammo:r_string_ex(is_knife and knife_ammo_sec or sec, "special")
                if str_spec then
					if str_spec == "frag" then
						local frag_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, str_spec) .. game.translate_string("st_ballistics_"..str_spec)
						self.stats[i].txt:SetText(frag_str)
					elseif str_spec == "fire" then
						local fire_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, "burn_stacks") .. " " .. game.translate_string("st_ballistics_"..str_spec)
						self.stats[i].txt:SetText(fire_str)
					elseif str_spec == "shock" then
						local shock_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, "shock_stacks") .. " " .. game.translate_string("st_ballistics_"..str_spec)
						self.stats[i].txt:SetText(shock_str)	
					elseif str_spec == "flinch" then
						local flinch_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, str_spec) .. game.translate_string("st_ballistics_"..str_spec)
						self.stats[i].txt:SetText(flinch_str)
					else
						self.stats[i].txt:SetText(game.translate_string("st_ballistics_"..str_spec))
					end
                end
            end
			if self.stats[i].cap:GetText() == game.translate_string("st_prop_extra") then    
                local str_spec_2 = ini_ammo:r_string_ex(is_knife and knife_ammo_sec or sec, "special_2")
                if str_spec_2 then
					if str_spec_2 == "frag" then
						local frag_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, str_spec_2) .. game.translate_string("st_ballistics_"..str_spec_2)
						self.stats[i].txt:SetText(frag_str)
					elseif str_spec_2 == "fire" then
						local fire_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, "burn_stacks") .. " " .. game.translate_string("st_ballistics_"..str_spec_2)
						self.stats[i].txt:SetText(fire_str)
					elseif str_spec_2 == "shock" then
						local shock_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, "shock_stacks") .. " " .. game.translate_string("st_ballistics_"..str_spec_2)
						self.stats[i].txt:SetText(shock_str)
					elseif str_spec_2 == "flinch" then
						local flinch_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, str_spec_2) .. game.translate_string("st_ballistics_"..str_spec_2)
						self.stats[i].txt:SetText(flinch_str)
					else
						self.stats[i].txt:SetText(game.translate_string("st_ballistics_"..str_spec_2))
					end
                end
            end
        end
    end

end

function prop_damage(obj, sec)
    local val = SYS_GetParam(2, obj and obj:section() or sec, "k_hit") or 1
	
	if val >= 1 then
		val = val * -1
	end
	
	if (val < 0.1) and (val > -0.1) then
		return (round_idp(val * 100, 2))
	else
		return (round_idp(val * 100, 1))
	end
	
	return 0
end

-- pull from the armor classification
function prop_ap(obj, sec)
	return 1
end

function prop_projectiles(obj, sec)
    local proj = SYS_GetParam(2, sec, "buck_shot")
    return proj > 2 and proj or 0
end

function prop_accuracy(obj, sec)
	local val = (SYS_GetParam(2, obj and obj:section() or sec, "k_disp") or 1)
	
	if val < 1 then
		val = val * -1
	end
	
	if (val < 0.1) and (val > -0.1) then
		return (round_idp(val * 100, 2))
	else
		return (round_idp(val * 100, 1))
	end
	
	return 0
end


function prop_flatness(obj, sec)
    local val = (SYS_GetParam(2, obj and obj:section() or sec, "k_bullet_speed") or 1)
	
	if val >= 1 then
		val = val * -1
	end
	
	if (val < 0.1) and (val > -0.1) then
		return (round_idp(val * 100, 2))
	else
		return (round_idp(val * 100, 1))
	end
	return 0
end

function prop_wear(obj, sec)
    local impair = ini_ammo:r_float_ex(sec, "impair") or 1
    if impair ~= 1 then
        return math.floor(100 * impair)
    else return 0
    end
end

function prop_special(obj, sec)
    local str_spec = ini_ammo:r_string_ex(sec, "special")
    if str_spec then return 1 else return 0 end
end

function prop_extra_special(obj, sec)
    local str_spec = ini_ammo:r_string_ex(sec, "special_2")
    if str_spec then return 1 else return 0 end
end

-- Momopate's Additions
function prop_nopen(obj, sec)
	local penalty = 0
	local flinch_chance = 0
	local ammo_sec = obj and obj:section() or sec
	
	flinch_chance = ini_ammo:r_float_ex(ammo_sec, "flinch") or 0
	flinch_chance = flinch_chance * 0.01
	if cxv_artigrok_bo.hp_rounds[ammo_sec] then
		hp_penalty = cxv_artigrok_bo.hp_rounds[ammo_sec] or 1
		penalty = ((1 + flinch_chance) / hp_penalty)
	end
	
	local val = (penalty ~= 1) and penalty or 0
	
	if val == 0 then return 0 end
	
	if val >= 1 then
		val = val * -1
	end
	
	if (val < 0.1) and (val > -0.1) then
		return (round_idp(val * 100, 2))
	else
		return (round_idp(val * 100, 1))
	end
	
	return 0
end

function prop_falloff(obj, sec)
	local perc = round_idp((SYS_GetParam(2, obj and obj:section() or sec, "k_air_resistance") or 0), 2)
	if perc < 1 then
		perc = perc * -1
	end
	
	if (perc < 0.1) and (perc > -0.1) then
		return (round_idp(perc * 100, 2))
	else
		return (round_idp(perc * 100, 1))
	end
end

function prop_range(obj, sec)
	local val = (SYS_GetParam(2, obj and obj:section() or sec, "k_dist") or 1)
	if val >= 1 then
		val = val * -1
	end
	
	if (val < 0.1) and (val > -0.1) then
		return (round_idp(val * 100, 2))
	else
		return (round_idp(val * 100, 1))
	end
	return 0
end


function prop_mutant_mod(obj, sec)
	local mutant_mod = ini_ammo:r_float_ex(sec, "mutant_mod") or 0.85
    if mutant_mod ~= 0.85 then
        return math.floor(100 * (mutant_mod - 0.85))
    else 
		return 0
	end
end

function prop_gigant_mod(obj, sec)
	local gigant_mod = ini_ammo:r_float_ex(sec, "gigant_mod") or 0.85
    if gigant_mod ~= 0.85 then
        return math.floor(100 * (gigant_mod - 0.85))
    else 
		return 0
	end
end

function prop_stalker_mod(obj, sec)
	local stalker_mod = ini_ammo:r_float_ex(sec, "stalker_mod") or 1
    if stalker_mod ~= 1 then
        return math.floor(100 * (stalker_mod - 1))
    else 
		return 0
	end
end

function prop_degr(obj, sec)
	local val = (SYS_GetParam(2, obj and obj:section() or sec, "impair") or 1)
	if val < 1 then
		val = val * -1
	end
	if val == 1 then 
		return 0 
	end
	if (val < 0.1) then
		return (round_idp(val * 100, 2))
	else
		return (round_idp(val * 100, 1))
	end
	return 0
end

function on_option_change()
	if ui_mcm and ballistics_mcm then
		difficulty_scaling = ballistics_mcm.get_config("difficulty_scaling") or false
		difficulty_multiplier = {
			[1]  = (difficulty_scaling and 1.3) or 1.0,
			[2]  = (difficulty_scaling and 1.05) or 1.0,
			[3]  = (difficulty_scaling and 0.90) or 1.0,
			[4]  = (difficulty_scaling and 0.80) or 1.0,
		}
	end
end

function on_game_start()
	-- ilrathCXV (04/01/2024): MCM options
	RegisterScriptCallback("on_option_change",on_option_change)
	on_option_change()
end