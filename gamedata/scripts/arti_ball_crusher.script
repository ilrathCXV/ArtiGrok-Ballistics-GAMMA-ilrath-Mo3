local valid_crusher = {
    ["af_night_star"] 				= true,
	["af_sponge"]					= true,
	["af_dummy_dummy"]				= true,
	["af_ice"]						= true,
	["af_black_spray"]				= true,
	["af_death_lamp"] 				= true,
    ["af_medusa"] 					= true,
	["af_empty"]					= true,
    ["af_vyvert"] 					= true,
    ["af_gravi"] 					= true,
	["af_gold_fish"]				= true,
	["af_full_empty"]				= true,
	["af_itcher"]					= true,
	["af_dummy_glassbeads"]			= true,
    ["af_pin"] 						= true,
	["af_eye"]						= true,
    ["af_crystal"] 					= true,
    ["af_fireball"] 				= true,
	["af_fire"]						= true,
	["af_fire_loop"]				= true,
    ["af_blood"] 					= true,
    ["af_mincer_meat"] 				= true,
	["af_bracelet"]					= true,
	["af_lobster_eyes"]				= true,
	["af_baloon"]					= true,
    ["af_electra_sparkler"] 		= true,
    ["af_dummy_battery"] 			= true,
	["af_electra_moonlight"]		= true,
    ["af_ring"] 					= true,
	["af_electra_flash"]			= true,
	["af_bat"]						= true,
	["af_soul"]						= true,
	["af_fuzz_kolobok"]				= true,
	["af_glass"]					= true,
	["af_oasis_heart"]				= true,
	["af_compass"]					= true,
	["af_monolith"] 				= true,
	["af_cristall_flower"]			= true,
	["af_cristall"]					= true,
}

local custom_rank = 
{
	["af_bat"] 			= 2,
	["af_fire_loop"]	= 4,
	["af_monolith"] 	= 4,
	["af_compass"]		= 4,
	["af_oasis_heart"]	= 4,
	["af_death_lamp"] 	= 4,
}

gc = game.translate_string
-- to powderize artifacts into crafting material

local fragment_convert_list = {
	["powder_gravi"] 				= true,
	["powder_fireball"] 			= true,
	["powder_nightstar"] 			= true,
	["powder_blood"] 				= true,
}

local modes = {
	["inventory"] = true,
}

local bags = {
	["actor_bag"] = true,
	["actor_equ"] = true,
	["actor_belt"] = true,
}

function try_crush(obj, bag, mode)
    if obj and bags[bag] and modes[mode] then
		local arte = obj:section()
		if valid_crusher[arte] then
			return gc("st_crush")
		end
    end
end

function try_convert(obj, bag, mode)
    if obj and bags[bag] and modes[mode] then
		local fragments = obj:section()
		if fragment_convert_list[fragments] then
			return gc("st_frag_convert")
		end
    end
end

-- CXVilrath - Created to allow the Volat Emerald to give multiple powders + condition affects amount of powder given (ceil is used to be more forgiving)
-- CXVilrath 11/24/23 - Reworked to follow new structure
-- CXVilrath 3/13/24 - Added all other non-PBA artefacts + Knot into appropriate crusher lists above
-- CXVilrath 3/15/24 - Reworked for new artefact fragment stack size (for Ammo Maker compatability)
-- CXVilrath 5/3/24 - Reworked for fragment simplification
function crush_new(obj, bag, mode)
	local artefact = obj:section()
	local rank 
	if custom_rank[artefact] then
		rank = custom_rank[artefact]
	else
		rank = SYS_GetParam(2, artefact, "af_rank") or 0
	end
	
	local amount = 2
	
	if rank > 0 then
		local condition = obj:condition() or 0.33
		amount = clamp(15 * rank * condition, 1, 60)
		amount = math.floor(amount + 0.5)
	end
	
	printf("Artefact: %s | Rank: %s | Fragment Amount: %s", artefact, rank, amount)
	
	if amount then
		alife_release(obj)
		alife_create_item("powder_battery", db.actor, {ammo = amount})
	end
end

function fragment_convert(obj, bag, mode)
	local fragment = obj:section()
	if not fragment_convert_list[fragment] then return end
	
	local to_convert = {}
        
	db.actor:iterate_ruck(function(temp, item)
        if item:section() == fragment then
            table.insert(to_convert, item)
        end
    end)
	
	if is_empty(to_convert) then return end
	local fragment_count = 0
	for k,v in pairs(to_convert) do
		local stack_count = v:ammo_get_count() or 1
		fragment_count = fragment_count + stack_count
		alife_release(v)
	end
	
	alife_create_item("powder_battery", db.actor, {ammo = fragment_count})
end

function on_game_start()
    custom_functor_autoinject.add_functor("arti_crush", try_crush, try_crush, nil, crush_new, true)
	custom_functor_autoinject.add_functor("cxv_fragments", try_convert, try_convert, nil, fragment_convert, true)
end